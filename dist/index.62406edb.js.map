{"mappings":"AAAA,KAAK,CAAC,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAS;AAExD,EAAiC,AAAjC,+BAAiC;AACjC,EAA8C,AAA9C,4CAA8C;AAC9C,EAA+B,AAA/B,6BAA+B;AAC/B,EAA+E,AAA/E,6EAA+E;AAC/E,EAAoB,AAApB,kBAAoB;AACpB,EAAQ,AAAR,MAAQ;AACR,EAAK,AAAL,GAAK;AAEL,EAAwC,AAAxC,sCAAwC;AACxC,EAAuC,AAAvC,qCAAuC;AAEvC,EAAuC,AAAvC,qCAAuC;AAEvC,EAAyC,AAAzC,uCAAyC;AACzC,EAAoE,AAApE,kEAAoE;AAEpE,EAAmC,AAAnC,iCAAmC;AACnC,KAAK,CAAC,UAAU,oBAAqB,CAAC;IACpC,GAAG,CAAC,CAAC;QACH,EAAoB,AAApB,kBAAoB;QACpB,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,KAAK,CAC1B,CAAiG;QAGnG,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI;QAChC,EAAwB,AAAxB,sBAAwB;QACxB,EAAE,GAAG,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QACvE,GAAG,CAAC,CAAC,CAAC,MAAM,EAAC,CAAC,GAAG,IAAI,CAAC,IAAI;QAC1B,OAAO,CAAC,GAAG,CAAC,MAAM;QAElB,GAAG,CAAC,QAAQ,GAAG,CAAC;YACd,EAAE,EAAE,MAAM,CAAC,EAAE;YACb,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,SAAS,EAAE,MAAM,CAAC,SAAS;YAC3B,WAAW,EAAE,MAAM,CAAC,YAAY;YAChC,WAAW,EAAE,MAAM,CAAC,WAAW;YAC/B,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,KAAK,EAAE,MAAM,CAAC,SAAS;YACvB,SAAS,EAAE,MAAM,CAAC,UAAU;QAC9B,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,QAAQ;QAEpB,EAAsB,AAAtB,oBAAsB;QAEtB,KAAK,CAAC,MAAM,IAAI;;kBAEF,EAAE,QAAQ,CAAC,KAAK,CAAC,OAAO,EACpC,QAAQ,CAAC,KAAK,CACf;;gBAEW,EAAE,QAAQ,CAAC,KAAK,CAAC;;;;;;;;;qEASoC,EACzD,QAAQ,CAAC,WAAW,CACrB;;;;;;;oEAOyD,EACxD,QAAQ,CAAC,QAAQ,CAClB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAgCH,EACE,EAAkE,AAAlE,gEAAkE;QAClE,EAAyE,AAAzE,uEAAyE;QACzE,EAA4B,AAA5B,0BAA4B;QAC5B,QAAQ,CAAC,WAAW,CACjB,GAAG,EAAE,UAAU,GAAK,CAAC;YACpB,MAAM,EAAE;;;;;0CAKoB,EAAE,UAAU,CAAC,QAAQ,CAAC;;yCAEvB,EAAE,UAAU,CAAC,IAAI,CAAC;cAC7C,EAAE,UAAU,CAAC,WAAW,CAAC;;;UAG7B;QACE,CAAC,EACA,IAAI,CAAC,CAAE,GACX;;;;;;;;0CAQiC,EAC9B,QAAQ,CAAC,SAAS,CACnB;;;;;gBAKK,EAAE,QAAQ,CAAC,SAAS,CAAC;;;;;;;;;IASjC;QAEA,EAAqE,AAArE,mEAAqE;QACrE,eAAe,CAAC,SAAS,GAAG,CAAE;QAC9B,EAAiD,AAAjD,+CAAiD;QACjD,eAAe,CAAC,kBAAkB,CAAC,CAAY,aAAE,MAAM;IACzD,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC;QACb,OAAO,CAAC,GAAG,CAAC,GAAG;IACjB,CAAC;AACH,CAAC;AAED,UAAU","sources":["src/js/controller.js"],"sourcesContent":["const recipeContainer = document.querySelector(\".recipe\");\n\n// const timeout = function (s) {\n//   return new Promise(function (_, reject) {\n//     setTimeout(function () {\n//       reject(new Error(`Request took too long! Timeout after ${s} second`));\n//     }, s * 1000);\n//   });\n// };\n\n// Api to use to build this applications\n// https://forkify-api.herokuapp.com/v2\n\n///////////////////////////////////////\n\n// async functions will awlways a promise\n// we should always start an async function with try and catch block\n\n// Loading recipe data from the Api\nconst showRecipe = async function () {\n  try {\n    // 1) Loading Recipe\n    const response = await fetch(\n      \"https://forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bca3b?key=<insert your key>\"\n      // \"https://forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bc886?key=<insert your key>\"\n    );\n    const data = await response.json();\n    // if response is not ok\n    if (!response.ok) throw new Error(`${data.message} (${response.status})`);\n    let { recipe } = data.data;\n    console.log(recipe);\n\n    let myRecipe = {\n      id: recipe.id,\n      title: recipe.title,\n      publisher: recipe.publisher,\n      cookingTime: recipe.cooking_time,\n      ingredients: recipe.ingredients,\n      servings: recipe.servings,\n      image: recipe.image_url,\n      sourceUrl: recipe.source_url,\n    };\n\n    console.log(myRecipe);\n\n    // 2) Rendering recipe\n\n    const markup = `\n      <figure class=\"recipe__fig\">\n        <img src=\"${myRecipe.image}\" alt=\"${\n      myRecipe.title\n    }\" class=\"recipe__img\" />\n        <h1 class=\"recipe__title\">\n          <span>${myRecipe.title}</span>\n        </h1>\n      </figure>\n\n      <div class=\"recipe__details\">\n        <div class=\"recipe__info\">\n          <svg class=\"recipe__info-icon\">\n            <use href=\"src/img/icons.svg#icon-clock\"></use>\n          </svg>\n          <span class=\"recipe__info-data recipe__info-data--minutes\">${\n            myRecipe.cookingTime\n          }</span>\n          <span class=\"recipe__info-text\">minutes</span>\n        </div>\n        <div class=\"recipe__info\">\n          <svg class=\"recipe__info-icon\">\n            <use href=\"src/img/icons.svg#icon-users\"></use>\n          </svg>\n          <span class=\"recipe__info-data recipe__info-data--people\">${\n            myRecipe.servings\n          }</span>\n          <span class=\"recipe__info-text\">servings</span>\n\n          <div class=\"recipe__info-buttons\">\n            <button class=\"btn--tiny btn--increase-servings\">\n              <svg>\n                <use href=\"src/img/icons.svg#icon-minus-circle\"></use>\n              </svg>\n            </button>\n            <button class=\"btn--tiny btn--increase-servings\">\n              <svg>\n                <use href=\"src/img/icons.svg#icon-plus-circle\"></use>\n              </svg>\n            </button>\n          </div>\n        </div>\n\n        <div class=\"recipe__user-generated\">\n          <svg>\n            <use href=\"src/img/icons.svg#icon-user\"></use>\n          </svg>\n        </div>\n        <button class=\"btn--round\">\n          <svg class=\"\">\n            <use href=\"src/img/icons.svg#icon-bookmark-fill\"></use>\n          </svg>\n        </button>\n      </div>\n\n      <div class=\"recipe__ingredients\">\n        <h2 class=\"heading--2\">Recipe ingredients</h2>\n        <ul class=\"recipe__ingredient-list\">\n        ${\n          // we want to return all the li items together as a huge html file\n          // so we are going to join the array that gets returned in the end to get\n          // all the li items together\n          myRecipe.ingredients\n            .map((ingredient) => {\n              return `\n          <li class=\"recipe__ingredient\">\n            <svg class=\"recipe__icon\">\n              <use href=\"src/img/icons.svg#icon-check\"></use>\n            </svg>\n            <div class=\"recipe__quantity\">${ingredient.quantity}</div>\n            <div class=\"recipe__description\">\n              <span class=\"recipe__unit\">${ingredient.unit}</span>\n              ${ingredient.description}\n            </div>\n          </li>\n          `;\n            })\n            .join(\"\")\n        }\n        </ul>\n      </div>\n\n      <div class=\"recipe__directions\">\n        <h2 class=\"heading--2\">How to cook it</h2>\n        <p class=\"recipe__directions-text\">\n          This recipe was carefully designed and tested by\n          <span class=\"recipe__publisher\">${\n            myRecipe.publisher\n          }</span>. Please check out\n          directions at their website.\n        </p>\n        <a\n          class=\"btn--small recipe__btn\"\n          href=\"${myRecipe.sourceUrl}\"\n          target=\"_blank\"\n        >\n          <span>Directions</span>\n          <svg class=\"search__icon\">\n            <use href=\"src/img/icons.svg#icon-arrow-right\"></use>\n          </svg>\n        </a>\n      </div>    \n    `;\n\n    // clear the recipe container before we add a recipe with its details\n    recipeContainer.innerHTML = \"\";\n    // Insert html to the dom , to the parent element\n    recipeContainer.insertAdjacentHTML(\"afterbegin\", markup);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nshowRecipe();\n"],"names":[],"version":3,"file":"index.62406edb.js.map","sourceRoot":"/__parcel_source_root/"}